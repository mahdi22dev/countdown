datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")// Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/d/migrate-shadow
}

generator client {
  provider        = "prisma-client-js" /// You won't need this in Prisma 3.X or higher.
}

model Account {
  id                 String  @id @default(auto()) @map("_id") @db.ObjectId
  userId             String  @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  
  access_token       String? 
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String  @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String  @db.ObjectId
  avatarUrl    String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  email         String   @unique
  password      String
  avatar        String?
  emailVerified DateTime?
  createdAt     DateTime? @default(now())
  image         String?
  accounts      Account[]
  sessions      Session[]
  countdowns    UserCountdown[]
  Favorites    Favorites[]

}
model UserCountdown {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  targetDate DateTime
  createdAt  DateTime? @default(now())
  imageId Int? 
  description String?
  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId 
  Favourite String[]   @db.ObjectId
  Favorites  Favorites[] @relation(fields: [Favourite], references: [id])
}

model AllCountdowns {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  trendingId Int?
  title     String
  slug      String  @unique
  targetDate DateTime
  type String
  createdAt  DateTime? @default(now())
  imageUrl String? 
  description String?
  popularity Float?
  Favourite String[]   @db.ObjectId
  Favorites  Favorites[] @relation(fields: [Favourite], references: [id])
}

model Favorites {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @db.ObjectId
  UserCountdowns String[] @db.ObjectId
  countdowns    UserCountdown[]   @relation(fields: [UserCountdowns], references: [id])
  allcountdown String[]   @db.ObjectId
  allcountdowns  AllCountdowns[] @relation(fields: [allcountdown], references: [id])
}




model VerificationToken {
  identifier String  @id @default(auto()) @map("_id") @db.ObjectId
  token      String?   @unique
  expires    DateTime
}
